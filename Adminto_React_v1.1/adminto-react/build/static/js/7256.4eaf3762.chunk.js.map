{"version":3,"file":"static/js/7256.4eaf3762.chunk.js","mappings":"0NAkDA,EAvCqB,YAMkB,IALnCA,EAKkC,EALlCA,cACAC,EAIkC,EAJlCA,SACAC,EAGkC,EAHlCA,SACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,UAKMC,GAAUC,EAAAA,EAAAA,IAAqB,CAAEN,cAAAA,EAAeC,SAAAA,IAElDM,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAGjB,OACI,iBAAMP,SAAUI,EAAaJ,GAAWS,UAAWR,EAAWS,YAAU,EAAxE,SACKC,MAAMC,QAAQb,GACTA,EAASc,KAAI,SAACC,GACV,OAAOA,EAAMC,OAASD,EAAMC,MAAMC,KAC5BC,EAAAA,cAAoBH,EAAMI,MAA1B,6BAEWJ,EAAMC,OAFjB,IAGQV,SAAAA,EACAc,IAAKL,EAAMC,MAAMC,KACjBT,OAAAA,EACAD,QAAAA,MAGRQ,KAEVf,K,0mBCnBZqB,EAAgB,SAAC,GASA,IARnBJ,EAQkB,EARlBA,KACAK,EAOkB,EAPlBA,YACAC,EAMkB,EANlBA,YACAf,EAKkB,EALlBA,OAEAF,GAGkB,EAJlBC,QAIkB,EAHlBD,UACAI,EAEkB,EAFlBA,UACGc,GACe,YAClB,GAAwCC,EAAAA,EAAAA,WAAkB,GAA1D,eAAOC,EAAP,KAAqBC,EAArB,KAEA,OACI,iCACI,UAACC,EAAA,EAAD,CAAYlB,UAAU,OAAtB,WACI,SAACmB,EAAA,WAAD,gBACIV,KAAMO,EAAe,OAAS,WAC9BJ,YAAaA,EACbL,KAAMA,EACNa,GAAIb,EACJc,GAAG,QACHC,IAAK,SAACC,GACEV,GAAaA,EAAYU,IAEjCvB,UAAWA,EACXwB,aAAW1B,IAAUA,EAAOS,KACvBX,EAAWA,EAASW,GAAQ,IAXrC,IAYIkB,aAAclB,GACVO,KAER,gBACId,UAAW0B,GAAAA,CAAW,mBAAoB,uBAAwB,CAC9D,gBAAiBV,IAErB,gBAAeA,EAAe,OAAS,QAJ3C,UAMI,iBACIhB,UAAU,eACV2B,QAAS,WACLV,GAAiBD,WAMhClB,GAAUA,EAAOS,IACd,SAACY,EAAA,mBAAD,CAAuBV,KAAK,UAAUT,UAAU,UAAhD,SACKF,EAAOS,GAAP,UAEL,SAMVqB,EAAe,SAAC,GAYC,IAXnBnB,EAWkB,EAXlBA,KACAF,EAUkB,EAVlBA,KACAK,EASkB,EATlBA,YACAiB,EAQkB,EARlBA,QACAjC,EAOkB,EAPlBA,SACAE,EAMkB,EANlBA,OACAgC,EAKkB,EALlBA,KACAC,EAIkB,EAJlBA,KACA/B,EAGkB,EAHlBA,UACAa,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,8BACc,aAATL,GAAuBoB,GACpB,+BACI,SAAClB,GAAD,QACIJ,KAAMA,EACNK,YAAaA,EACbC,YAAaA,EACbf,OAAQA,EACRF,SAAUA,EACVI,UAAWA,GACPc,OAIZ,iCACI,SAACK,EAAA,WAAD,gBACIV,KAAMA,EACNG,YAAaA,EACbL,KAAMA,EACNc,GAAIS,EACJV,GAAIb,EACJe,IAAK,SAACC,GACEV,GAAaA,EAAYU,IAEjCvB,UAAWA,EACXwB,aAAW1B,IAAUA,EAAOS,KACvBX,EAAWA,EAASW,GAAQ,IAXrC,IAYIwB,KAAMA,GACFjB,IAGPhB,GAAUA,EAAOS,IACd,SAACY,EAAA,mBAAD,CAAuBV,KAAK,UAAUT,UAAU,UAAhD,SACKF,EAAOS,GAAP,UAEL,WAQlByB,EAAa,SAAC,GAYG,IAXnBvB,EAWkB,EAXlBA,KACAwB,EAUkB,EAVlBA,MACA1B,EASkB,EATlBA,KAEAX,GAOkB,EARlBgB,YAQkB,EAPlBhB,UACAE,EAMkB,EANlBA,OAGAE,GAGkB,EALlB8B,KAKkB,EAJlBC,KAIkB,EAHlB/B,WACAa,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,iCACI,SAACK,EAAA,SAAD,gBACIV,KAAMA,EACNwB,MAAOA,EACP1B,KAAMA,EACNa,GAAIb,EACJe,IAAK,SAACC,GACEV,GAAaA,EAAYU,IAEjCvB,UAAWA,EACXwB,aAAW1B,IAAUA,EAAOS,KACvBX,EAAWA,EAASW,GAAQ,IAC7BO,IAGPhB,GAAUA,EAAOS,IACd,SAACY,EAAA,mBAAD,CAAuBV,KAAK,UAAUT,UAAU,UAAhD,SACKF,EAAOS,GAAP,UAEL,SAMV2B,EAAc,SAAC,GAYE,IAXnBzB,EAWkB,EAXlBA,KACAwB,EAUkB,EAVlBA,MACA1B,EASkB,EATlBA,KAEAX,GAOkB,EARlBgB,YAQkB,EAPlBhB,UACAE,EAMkB,EANlBA,OAEAE,GAIkB,EALlB8B,KAKkB,EAJlB9B,WACAV,EAGkB,EAHlBA,SACAuB,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,iCACI,SAACK,EAAA,UAAD,gBACIV,KAAMA,EACNwB,MAAOA,EACP1B,KAAMA,EACNa,GAAIb,EACJe,IAAK,SAACC,GACEV,GAAaA,EAAYU,IAEjCjC,SAAUA,EACVU,UAAWA,EACXwB,aAAW1B,IAAUA,EAAOS,KACvBX,EAAWA,EAASW,GAAQ,IAC7BO,IAGPhB,GAAUA,EAAOS,IACd,SAACY,EAAA,mBAAD,CAAuBV,KAAK,UAA5B,SAAuCX,EAAOS,GAAP,UACvC,SA0GhB,EArGkB,SAAC,GAiBI,IAhBnB0B,EAgBkB,EAhBlBA,MACAxB,EAekB,EAflBA,KACAF,EAckB,EAdlBA,KACAK,EAakB,EAblBA,YACAiB,EAYkB,EAZlBA,QACAjC,EAWkB,EAXlBA,SACAE,EAUkB,EAVlBA,OAEAE,GAQkB,EATlBH,QASkB,EARlBG,WACAmC,EAOkB,EAPlBA,eACAC,EAMkB,EANlBA,eACAvB,EAKkB,EALlBA,YACAvB,EAIkB,EAJlBA,SACA+C,EAGkB,EAHlBA,OACAN,EAEkB,EAFlBA,KACGjB,GACe,YAEZgB,EAAgB,aAATrB,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAEzE6B,OAAyBC,IAAZV,GAAwBA,EAE3C,OACI,8BACc,WAATpB,GACG,kCAAOA,KAAMA,EAAMF,KAAMA,GAAWX,EAAWA,EAASW,GAAQ,IAASO,KAEzE,8BACc,WAATL,GACG,UAACU,EAAA,QAAD,CAAYnB,UAAWoC,EAAvB,UACKH,GACG,iCACI,SAACd,EAAA,QAAD,CAAYnB,UAAWmC,EAAvB,SAAwCF,IACvCI,GAAUA,KAEf,MAEJ,SAACH,GAAD,QACIzB,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbC,YAAaA,EACbf,OAAQA,EACRF,SAAUA,EACVkC,KAAMA,EACN9B,UAAWA,EACXV,SAAUA,GACNwB,QAIZ,8BACc,aAATL,GAAgC,UAATA,GACpB,SAACU,EAAA,QAAD,CAAYnB,UAAWoC,EAAvB,UACI,SAACJ,GAAD,QACIvB,KAAMA,EACNwB,MAAOA,EACP1B,KAAMA,EACNK,YAAaA,EACbC,YAAaA,EACbf,OAAQA,EACRF,SAAUA,EACVkC,KAAMA,EACN9B,UAAWA,EACX+B,KAAMA,GACFjB,OAIZ,UAACK,EAAA,QAAD,CAAYnB,UAAWoC,EAAvB,UACKH,GACG,iCACI,SAACd,EAAA,QAAD,CAAYnB,UAAWmC,EAAvB,SAAwCF,IACvCI,GAAUA,KAEf,MAEJ,SAACT,GAAD,QACInB,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbiB,QAASS,EACTzB,YAAaA,EACbf,OAAQA,EACRF,SAAUA,EACVkC,KAAMA,EACN9B,UAAWA,EACX+B,KAAMA,GACFjB,e,8PC3O5C,EApDiB,SAAC,GAA+E,IAA7E0B,EAA4E,EAA5EA,YAAaC,EAA+D,EAA/DA,aAAcC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,OAehE,OACI,+BAEI,gBAAKxB,GAAG,WAAR,UACI,SAAC,MAAD,CACIyB,YAAY,eACZC,QAAS,CAACC,EAAAA,GAAeC,EAAAA,GAAmBC,EAAAA,GAAgBC,EAAAA,EAAYC,EAAAA,GACxEC,oBAAoB,EACpBC,YAAY,YACZC,WAAY,CACRC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,IAAK,MACLC,KAAM,OACNC,KAAM,OACNC,KAAM,QAEVC,cAAe,CACXC,KAAM,kBACNC,OAAQ,QACRC,MAAO,mDAEXC,UAAU,EACVC,YAAY,EACZC,WAAW,EACXxB,OAAQA,EACRyB,UAxCQ,SAACC,GACrB9B,EAAY8B,IAwCAC,WAtCS,SAACD,GACtB7B,EAAa6B,IAsCDE,KApCG,SAACF,GAChB5B,EAAO4B,IAoCKG,UAlCQ,SAACH,GACrB3B,EAAY2B,W,sDCmGpB,EA3GqB,SAAC,GAQI,IAPtBI,EAOqB,EAPrBA,OACAC,EAMqB,EANrBA,QACAC,EAKqB,EALrBA,WACAC,EAIqB,EAJrBA,UACAC,EAGqB,EAHrBA,cACAC,EAEqB,EAFrBA,cACAC,EACqB,EADrBA,WAGA,GAAgBjE,EAAAA,EAAAA,UACZ8D,GAAa,CACTI,MAAOJ,EAAUI,MACjBjF,UAAW6E,EAAU7E,YAHtBkF,GAAP,eAQMC,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfL,MAAOI,EAAAA,KAAaE,SAAS,2BAC7BvF,UAAWqF,EAAAA,KAAaE,SAAS,6BAKnC9F,GAAUC,EAAAA,EAAAA,IAAQ,CAAEN,cAAe8F,EAAO7F,SAAU8F,IAEtDxF,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAQjB,OACI,UAAC0F,EAAA,EAAD,CAAOC,KAAMf,EAAQgB,OAAQf,EAA7B,WACI,SAACa,EAAA,SAAD,CAAcxF,UAAU,4BAA4B2F,aAAW,EAA/D,UACI,SAACH,EAAA,QAAD,CAAanE,GAAG,KAAKD,GAAG,cAAxB,SACKwD,EAAa,aAAe,qBAGrC,SAACY,EAAA,OAAD,CAAYxF,UAAU,iBAAtB,UACI,kBAAMO,KAAK,YAAYa,GAAG,YAAY7B,SAAUI,GAZtC,SAACiG,GACnBhB,EAAaG,EAAca,GAAQZ,EAAWY,MAWtC,WACI,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,SAAC,IAAD,CACItF,KAAK,OACLwB,MAAM,aACN1B,KAAK,QACLP,UAAU,eACVY,YAAY,oBACZwB,eAAgB,OAChBxC,SAAUA,EAEVE,OAAQA,EACRD,QAASA,GAFL,YAKZ,SAACiG,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,UAAC,IAAD,CACItF,KAAK,SACLwB,MAAM,WACN1B,KAAK,YACL6B,eAAgB,OAChBxC,SAAUA,EAEVE,OAAQA,EACRD,QAASA,EARb,WAUI,mBAAQmG,MAAM,YAAd,qBACA,mBAAQA,MAAM,aAAd,sBACA,mBAAQA,MAAM,aAAd,sBACA,mBAAQA,MAAM,UAAd,mBACA,mBAAQA,MAAM,UAAd,mBACA,mBAAQA,MAAM,aAAd,uBATI,mBAchB,UAACH,EAAA,EAAD,CAAK7F,UAAU,OAAf,WACI,SAAC8F,EAAA,EAAD,CAAKG,GAAI,EAAT,SACKrB,GACG,SAACsB,EAAA,EAAD,CAAQC,QAAQ,SAASxE,QAASmD,EAAlC,oBAGA,QAER,UAACgB,EAAA,EAAD,CAAKG,GAAI,EAAGjG,UAAU,WAAtB,WACI,SAACkG,EAAA,EAAD,CAAQlG,UAAU,qBAAqB2B,QAASgD,EAAhD,oBAGA,SAACuB,EAAA,EAAD,CAAQC,QAAQ,UAAU1F,KAAK,SAAST,UAAU,kBAAlD,iCClHtBoG,EAA8B,CAChC,CACIhF,GAAI,IACJ6D,MAAO,+BACPoB,MAAO,IAAIC,KACXtG,UAAW,cAEf,CACIoB,GAAI,IACJ6D,MAAO,mCACPoB,OAAO,IAAIC,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GACjDxG,UAAW,WAEf,CACIoB,GAAI,IACJ6D,MAAO,wBACPoB,OAAO,IAAIC,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GACjDC,KAAK,IAAIH,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GAC/CxG,UAAW,cAEf,CACIoB,GAAI,IACJ6D,MAAO,cACPoB,OAAO,IAAIC,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GACjDC,KAAK,IAAIH,MAAOC,SAAQ,IAAID,MAAOE,UAAY,GAC/CxG,UAAW,eCTb0G,EAAY,WAyBd,OACI,iCACI,iBAAKtF,GAAG,kBAAR,WACI,mBACA,cAAGpB,UAAU,aAAb,gEA3BW,CACnB,CACIoB,GAAI,EACJpB,UAAW,aACXiF,MAAO,qBAEX,CACI7D,GAAI,EACJpB,UAAW,UACXiF,MAAO,YAEX,CACI7D,GAAI,EACJpB,UAAW,aACXiF,MAAO,gBAEX,CACI7D,GAAI,EACJpB,UAAW,YACXiF,MAAO,sBAUiB,IAAI7E,KAAI,SAAC8E,EAAOyB,GAChC,OACI,iBAEI3G,UAAW0B,GAAAA,CAAW,iBAAkBwD,EAAMlF,WAC9CiF,MAAOC,EAAMD,MACb,aAAYC,EAAMlF,UAJtB,WAMI,cAAGA,UAAU,uDACZkF,EAAMD,QANF0B,EAAMC,mBAW3B,SAAC,IAAD,CAAWnG,KAAK,WAAWF,KAAK,WAAW0B,MAAM,oBAAoBjC,UAAU,aA0L3F,EArLoB,YAEhB6G,EAAAA,EAAAA,IAAa,CACT5B,MAAO,WACP6B,gBAAiB,CACb,CACIC,KAAM,iBACN9E,MAAO,QAEX,CACI8E,KAAM,iBACN9E,MAAO,WACP+E,QAAQ,MAMpB,OAAwBjG,EAAAA,EAAAA,WAAkB,GAA1C,eAAO0E,EAAP,KAAawB,EAAb,KACMC,EAAe,WACjBD,GAAQ,GACRE,EAAa,IACbC,EAAY,KAEVC,EAAc,kBAAMJ,GAAQ,IAClC,GAAoClG,EAAAA,EAAAA,WAAkB,GAAtD,eAAO6D,EAAP,KAAmB0C,EAAnB,KAGA,GAA4BvG,EAAAA,EAAAA,WAAQ,OAAmBqF,IAAvD,eAAOxD,EAAP,KAAe2E,EAAf,KACA,GAAkCxG,EAAAA,EAAAA,UAAqB,IAAvD,eAAO8D,EAAP,KAAkBsC,EAAlB,KACA,GAAgCpG,EAAAA,EAAAA,UAAc,IAA9C,eAAOyG,EAAP,KAAiBJ,EAAjB,MAEAK,EAAAA,EAAAA,YAAU,WAEN,IAAIC,EAAcC,SAASC,eAAe,mBAC1C,IAAIC,EAAAA,GAAUH,EAAc,CACxBI,aAAc,sBAEnB,IAgGH,OACI,iCACI,UAACjC,EAAA,EAAD,YACI,UAACC,EAAA,EAAD,CAAKiC,GAAI,EAAT,WAEI,UAAC7B,EAAA,EAAD,CACIlG,UAAU,uCACVoB,GAAG,gBACHO,QAbG,WACnB2F,GAAc,GACdD,KAQY,WAKI,cAAGrH,UAAU,oBALjB,kBAQA,SAAC0G,EAAD,QAEJ,SAACZ,EAAA,EAAD,CAAKiC,GAAI,EAAT,UACI,SAACC,EAAA,EAAD,WACI,SAACA,EAAA,OAAD,WAEI,SAAC,EAAD,CACIxF,YA/GR,SAAC8B,GACjB8C,EAAY9C,GACZ+C,IACAC,GAAc,IA6GU7E,aAzGP,SAAC6B,GAClB,IAAMY,EAAQ,CACV9D,GAAI6G,OAAO3D,EAAIY,MAAM9D,IACrB6D,MAAOX,EAAIY,MAAMD,MACjBjF,UAAWsE,EAAIY,MAAMxD,WAAW,IAEpCyF,EAAajC,GACboC,GAAc,GACdD,KAkGwB3E,OA9Fb,SAAC4B,GACZ,IAAM4D,EAAgB5D,EAChBW,EAAQiD,EAAcC,UAAUlD,MACtC,GAAa,MAATA,OACG,CACH,IAAImD,EAAW,CACXhH,GAAI6G,OAAOrF,EAAOyF,OAAS,GAC3BpD,MAAOA,EACPoB,MAAO6B,EAAgBA,EAAcI,QAAU,IAAIhC,KACnDtG,UAAWkI,EAAcC,UAAUI,WAAW,cAAnC,OAETC,GAAc,OAAO5F,GAC3B4F,EAAeC,KAAKL,GAEpBb,EAAUiB,KAiFU5F,OAAQA,EACRD,YAzCR,SAAC2B,GACjB,IAAMkE,GAAc,OAAO5F,GACrB8F,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAYA,EAAC,KAAWtE,EAAIY,MAAM9D,MACvEoH,EAAeE,GAAf,MAA+BpE,EAAIY,MAAMD,MACzCuD,EAAeE,GAAf,UAAmCpE,EAAIY,MAAMxD,WAC7C8G,EAAeE,GAAf,MAA+BpE,EAAIY,MAAMmB,MACzCmC,EAAeE,GAAf,IAA6BpE,EAAIY,MAAMuB,IACvCc,EAAUiB,GACVlB,GAAc,eAyCT7B,GACG,SAAC,EAAD,CACIf,OAAQe,EACRd,QAASuC,EACTtC,WAAYA,EACZC,UAAWA,EACXE,cA7EM,SAACa,GACnB,IAAM4C,GAAc,OAAO5F,GACrB8F,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAYA,EAAC,KAAW/D,EAAWzD,MACxEoH,EAAeE,GAAf,MAA+B9C,EAAKX,MACpCuD,EAAeE,GAAf,UAAmC9C,EAAK5F,UACxCuH,EAAUiB,GACVtB,IACAI,GAAc,IAuEFxC,cAnEM,WAClB,IAAI0D,GAAc,OAAO5F,GACnB8F,EAAMF,EAAeG,WAAU,SAACC,GAAD,OAAYA,EAAC,KAAW/D,EAAWzD,MACxEoH,EAAeK,OAAOH,EAAK,GAC3BnB,EAAUiB,GACVtB,KA+DYlC,WA7FG,SAACY,GAChB,IAAM4C,GAAc,OAAO5F,GACrBsC,EAAQ,CACV9D,GAAI6G,OAAOO,EAAeH,OAAS,GACnCpD,MAAOW,EAAKX,MACZoB,MAAwC,IAAjCyC,OAAOC,KAAKvB,GAAUa,OAAeb,EAASwB,KAAO,IAAI1C,KAChEtG,UAAW4F,EAAK5F,WAEpBwI,EAAeC,KAAKvD,GACpBqC,EAAUiB,GACVtB,OAqFQ","sources":["components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/apps/Calendar/Calendar.tsx","pages/apps/Calendar/AddEditEvent.tsx","pages/apps/Calendar/data.tsx","pages/apps/Calendar/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import FullCalendar, { EventDropArg } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport BootstrapTheme from '@fullcalendar/bootstrap';\nimport { EventInput } from '@fullcalendar/core';\n\ntype CalendarProps = {\n    onDateClick: (value: any) => void;\n    onEventClick: (value: any) => void;\n    onEventDrop: (value: EventDropArg) => void;\n    onDrop: (value: any) => void;\n    events: EventInput[];\n};\n\nconst Calendar = ({ onDateClick, onEventClick, onDrop, onEventDrop, events }: CalendarProps) => {\n    // handle calendar methods\n    const handleDateClick = (arg: any) => {\n        onDateClick(arg);\n    };\n    const handleEventClick = (arg: any) => {\n        onEventClick(arg);\n    };\n    const handleDrop = (arg: any) => {\n        onDrop(arg);\n    };\n    const handleEventDrop = (arg: EventDropArg) => {\n        onEventDrop(arg);\n    };\n\n    return (\n        <>\n            {/* full calendar control */}\n            <div id=\"calendar\">\n                <FullCalendar\n                    initialView=\"dayGridMonth\"\n                    plugins={[dayGridPlugin, interactionPlugin, timeGridPlugin, listPlugin, BootstrapTheme]}\n                    handleWindowResize={true}\n                    themeSystem=\"bootstrap\"\n                    buttonText={{\n                        today: 'Today',\n                        month: 'Month',\n                        week: 'Week',\n                        day: 'Day',\n                        list: 'List',\n                        prev: 'Prev',\n                        next: 'Next',\n                    }}\n                    headerToolbar={{\n                        left: 'prev,next today',\n                        center: 'title',\n                        right: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth',\n                    }}\n                    editable={true}\n                    selectable={true}\n                    droppable={true}\n                    events={events}\n                    dateClick={handleDateClick}\n                    eventClick={handleEventClick}\n                    drop={handleDrop}\n                    eventDrop={handleEventDrop}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default Calendar;\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Modal, Row, Col, Button } from 'react-bootstrap';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { EventInput } from '@fullcalendar/core';\n\n// components\nimport { FormInput } from '../../../components/form';\n\ntype AddEditEventProps = {\n    isOpen?: boolean;\n    onClose?: () => void;\n    isEditable?: boolean;\n    eventData: EventInput;\n    onRemoveEvent?: () => void;\n    onUpdateEvent: (value: any) => void;\n    onAddEvent: (value: any) => void;\n};\n\nconst AddEditEvent = ({\n    isOpen,\n    onClose,\n    isEditable,\n    eventData,\n    onRemoveEvent,\n    onUpdateEvent,\n    onAddEvent,\n}: AddEditEventProps) => {\n    // event state\n    const [event] = useState(\n        eventData && {\n            title: eventData.title,\n            className: eventData.className,\n        }\n    );\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            title: yup.string().required('Please enter event name'),\n            className: yup.string().required('Please select category'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ defaultValues: event, resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    // handle form submission\n    const onSubmitEvent = (data: EventInput) => {\n        isEditable ? onUpdateEvent(data) : onAddEvent(data);\n    };\n\n    return (\n        <Modal show={isOpen} onHide={onClose}>\n            <Modal.Header className=\"py-3 px-4 border-bottom-0\" closeButton>\n                <Modal.Title as=\"h5\" id=\"modal-title\">\n                    {isEditable ? 'Edit Event' : 'Add New Event'}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body className=\"px-4 pb-4 pt-0\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(onSubmitEvent)}>\n                    <Row>\n                        <Col sm={12}>\n                            <FormInput\n                                type=\"text\"\n                                label=\"Event Name\"\n                                name=\"title\"\n                                className=\"form-control\"\n                                placeholder=\"Insert Event Name\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"title\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col sm={12}>\n                            <FormInput\n                                type=\"select\"\n                                label=\"Category\"\n                                name=\"className\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"className\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option value=\"bg-danger\">Danger</option>\n                                <option value=\"bg-success\">Success</option>\n                                <option value=\"bg-primary\">Primary</option>\n                                <option value=\"bg-info\">Info</option>\n                                <option value=\"bg-dark\">Dark</option>\n                                <option value=\"bg-warning\">Warning</option>\n                            </FormInput>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"mt-2\">\n                        <Col xs={4}>\n                            {isEditable ? (\n                                <Button variant=\"danger\" onClick={onRemoveEvent}>\n                                    Delete\n                                </Button>\n                            ) : null}\n                        </Col>\n                        <Col xs={8} className=\"text-end\">\n                            <Button className=\"btn btn-light me-1\" onClick={onClose}>\n                                Close\n                            </Button>\n                            <Button variant=\"success\" type=\"submit\" className=\"btn btn-success\">\n                                Save\n                            </Button>\n                        </Col>\n                    </Row>\n                </form>\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default AddEditEvent;\n","import { EventInput } from '@fullcalendar/core';\n\nconst defaultEvents: EventInput[] = [\n    {\n        id: '1',\n        title: 'Interview - Backend Engineer',\n        start: new Date(),\n        className: 'bg-success',\n    },\n    {\n        id: '2',\n        title: 'Phone Screen - Frontend Engineer',\n        start: new Date().setDate(new Date().getDate() + 2),\n        className: 'bg-info',\n    },\n    {\n        id: '3',\n        title: 'Meeting with John Deo',\n        start: new Date().setDate(new Date().getDate() + 2),\n        end: new Date().setDate(new Date().getDate() + 4),\n        className: 'bg-warning',\n    },\n    {\n        id: '4',\n        title: 'Buy a Theme',\n        start: new Date().setDate(new Date().getDate() + 4),\n        end: new Date().setDate(new Date().getDate() + 5),\n        className: 'bg-primary',\n    },\n];\n\nexport { defaultEvents };\n","import { useEffect, useState } from 'react';\nimport { Button, Card, Col, Row } from 'react-bootstrap';\nimport '@fullcalendar/react';\nimport { DateClickArg, Draggable } from '@fullcalendar/interaction';\nimport { DateInput, EventClickArg, EventDropArg, EventInput } from '@fullcalendar/core';\nimport classNames from 'classnames';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport Calendar from './Calendar';\nimport AddEditEvent from './AddEditEvent';\n\n// dummy data\nimport { defaultEvents } from './data';\nimport { FormInput } from '../../../components/form';\n\nconst SidePanel = () => {\n    // external events\n    const externalEvents = [\n        {\n            id: 1,\n            className: 'bg-primary',\n            title: 'New Theme Release',\n        },\n        {\n            id: 2,\n            className: 'bg-pink',\n            title: 'My Event',\n        },\n        {\n            id: 3,\n            className: 'bg-warning',\n            title: 'Meet manager',\n        },\n        {\n            id: 4,\n            className: 'bg-purple',\n            title: 'Create New theme',\n        },\n    ];\n\n    return (\n        <>\n            <div id=\"external-events\">\n                <br />\n                <p className=\"text-muted\">Drag and drop your event or click in the calendar</p>\n                {/* external events */}\n                {(externalEvents || []).map((event, index) => {\n                    return (\n                        <div\n                            key={index.toString()}\n                            className={classNames('external-event', event.className)}\n                            title={event.title}\n                            data-class={event.className}\n                        >\n                            <i className=\"mdi mdi-checkbox-blank-circle me-2 vertical-middle\"></i>\n                            {event.title}\n                        </div>\n                    );\n                })}\n            </div>\n            <FormInput type=\"checkbox\" name=\"checkbox\" label=\"Remove after drop\" className=\"my-3\" />\n        </>\n    );\n};\n\nconst CalendarApp = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Calendar',\n        breadCrumbItems: [\n            {\n                path: '/apps/calendar',\n                label: 'Apps',\n            },\n            {\n                path: '/apps/calendar',\n                label: 'Calendar',\n                active: true,\n            },\n        ],\n    });\n\n    // modal handling\n    const [show, setShow] = useState<boolean>(false);\n    const onCloseModal = () => {\n        setShow(false);\n        setEventData({});\n        setDateInfo({});\n    };\n    const onOpenModal = () => setShow(true);\n    const [isEditable, setIsEditable] = useState<boolean>(false);\n\n    // event data\n    const [events, setEvents] = useState<EventInput[]>([...defaultEvents]);\n    const [eventData, setEventData] = useState<EventInput>({});\n    const [dateInfo, setDateInfo] = useState<any>({});\n\n    useEffect(() => {\n        // create dragable events\n        let draggableEl = document.getElementById('external-events');\n        new Draggable(draggableEl!, {\n            itemSelector: '.external-event',\n        });\n    }, []);\n\n    // calendar events\n\n    // on date click\n    const onDateClick = (arg: DateClickArg) => {\n        setDateInfo(arg);\n        onOpenModal();\n        setIsEditable(false);\n    };\n\n    // on event click\n    const onEventClick = (arg: EventClickArg) => {\n        const event = {\n            id: String(arg.event.id),\n            title: arg.event.title,\n            className: arg.event.classNames[0],\n        };\n        setEventData(event);\n        setIsEditable(true);\n        onOpenModal();\n    };\n\n    // on drop\n    const onDrop = (arg: any) => {\n        const dropEventData = arg;\n        const title = dropEventData.draggedEl.title;\n        if (title == null) {\n        } else {\n            let newEvent = {\n                id: String(events.length + 1),\n                title: title,\n                start: dropEventData ? dropEventData.dateStr : new Date(),\n                className: dropEventData.draggedEl.attributes['data-class']['value'],\n            };\n            const modifiedEvents = [...events];\n            modifiedEvents.push(newEvent);\n\n            setEvents(modifiedEvents);\n        }\n    };\n\n    // on add event\n    const onAddEvent = (data: any) => {\n        const modifiedEvents = [...events];\n        const event = {\n            id: String(modifiedEvents.length + 1),\n            title: data.title,\n            start: Object.keys(dateInfo).length !== 0 ? dateInfo.date : new Date(),\n            className: data.className,\n        };\n        modifiedEvents.push(event);\n        setEvents(modifiedEvents);\n        onCloseModal();\n    };\n\n    // on update event\n    const onUpdateEvent = (data: any) => {\n        const modifiedEvents = [...events];\n        const idx = modifiedEvents.findIndex((e: any) => e['id'] === eventData!.id);\n        modifiedEvents[idx]['title'] = data.title;\n        modifiedEvents[idx]['className'] = data.className;\n        setEvents(modifiedEvents);\n        onCloseModal();\n        setIsEditable(false);\n    };\n\n    // on remove event\n    const onRemoveEvent = () => {\n        var modifiedEvents = [...events];\n        const idx = modifiedEvents.findIndex((e: any) => e['id'] === eventData!.id);\n        modifiedEvents.splice(idx, 1);\n        setEvents(modifiedEvents);\n        onCloseModal();\n    };\n\n    /**\n     * on event drop\n     */\n    const onEventDrop = (arg: EventDropArg) => {\n        const modifiedEvents = [...events];\n        const idx = modifiedEvents.findIndex((e: any) => e['id'] === arg.event.id);\n        modifiedEvents[idx]['title'] = arg.event.title;\n        modifiedEvents[idx]['className'] = arg.event.classNames;\n        modifiedEvents[idx]['start'] = arg.event.start as DateInput;\n        modifiedEvents[idx]['end'] = arg.event.end as DateInput;\n        setEvents(modifiedEvents);\n        setIsEditable(false);\n    };\n\n    // create new event\n    const createNewEvent = () => {\n        setIsEditable(false);\n        onOpenModal();\n    };\n\n    return (\n        <>\n            <Row>\n                <Col lg={3}>\n                    {/* add events */}\n                    <Button\n                        className=\"btn btn-lg font-16 btn-success w-100\"\n                        id=\"btn-new-event\"\n                        onClick={createNewEvent}\n                    >\n                        <i className=\"fa fa-plus me-1\"></i> Create New\n                    </Button>\n\n                    <SidePanel />\n                </Col>\n                <Col lg={9}>\n                    <Card>\n                        <Card.Body>\n                            {/* fullcalendar control */}\n                            <Calendar\n                                onDateClick={onDateClick}\n                                onEventClick={onEventClick}\n                                onDrop={onDrop}\n                                events={events}\n                                onEventDrop={onEventDrop}\n                            />\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            {/* add new event modal */}\n            {show ? (\n                <AddEditEvent\n                    isOpen={show}\n                    onClose={onCloseModal}\n                    isEditable={isEditable}\n                    eventData={eventData}\n                    onUpdateEvent={onUpdateEvent}\n                    onRemoveEvent={onRemoveEvent}\n                    onAddEvent={onAddEvent}\n                />\n            ) : null}\n        </>\n    );\n};\n\nexport default CalendarApp;\n"],"names":["defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","otherProps","useState","showPassword","setShowPassword","InputGroup","Form","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","labelClassName","containerClass","action","hasEndIcon","undefined","onDateClick","onEventClick","onDrop","onEventDrop","events","initialView","plugins","dayGridPlugin","interactionPlugin","timeGridPlugin","listPlugin","BootstrapTheme","handleWindowResize","themeSystem","buttonText","today","month","week","day","list","prev","next","headerToolbar","left","center","right","editable","selectable","droppable","dateClick","arg","eventClick","drop","eventDrop","isOpen","onClose","isEditable","eventData","onRemoveEvent","onUpdateEvent","onAddEvent","title","event","schemaResolver","yupResolver","yup","shape","required","Modal","show","onHide","closeButton","data","Row","Col","sm","value","xs","Button","variant","defaultEvents","start","Date","setDate","getDate","end","SidePanel","index","toString","usePageTitle","breadCrumbItems","path","active","setShow","onCloseModal","setEventData","setDateInfo","onOpenModal","setIsEditable","setEvents","dateInfo","useEffect","draggableEl","document","getElementById","Draggable","itemSelector","lg","Card","String","dropEventData","draggedEl","newEvent","length","dateStr","attributes","modifiedEvents","push","idx","findIndex","e","splice","Object","keys","date"],"sourceRoot":""}